volumes:
  n8n_storage:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_USER_MANAGEMENT_DISABLED=false
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - N8N_PROTOCOL=${N8N_PROTOCOL}
    - N8N_HOST=${N8N_HOST}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}

services:
  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup

  n8n:
    <<: *service-n8n
    hostname: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared

  ngrok:
    image: ngrok/ngrok:latest
    hostname: ngrok
    command: ["start", "--all", "--config", "/etc/ngrok.yml"]
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    networks: ['demo']
    environment:
      - NGROK_AUTHTOKEN=${NGROK_TOKEN}
    restart: unless-stopped
    ports:
      - 4040:4040

  api:
    build:
      context: .
      dockerfile: ./src/api/Dockerfile
    container_name: api
    restart: unless-stopped
    networks: ['demo']
    volumes:
      - .:/app
      - ./data:/app/data
    working_dir: /app
    ports:
      - "8000:8000"
